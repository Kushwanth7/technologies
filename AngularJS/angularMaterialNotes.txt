Angular material is the UI library for angular js

Some of the greatest advantages of using Angular material is
Responsive design
1) Angular Material has in-built responsive designing so that the website created using Angular Material will redesign itself as per the device size.
2) Angular Material classes are created in such a way that the website can fit any screen size.
3) The websites created using Angular Material are fully compatible with PC, tablets, and mobile devices.
4) It is designed considering the fact that it is much easier to add new CSS rules than to overwrite existing CSS rules.
5) It supports shadows and bold colors.
6) The colors and shades remain uniform across various platforms and devices.

Angular material is the alternate for Twitter Bootstrap

Angular material directives
1) md-autocomplete, an Angular Directive, is used as a special input control with an inbuilt drop-down to show all possible matches to a custom query.
2) md-card is an Angular Directive, it’s a container directive and is used to draw cards in AngularJs application
3) Layout directive is used on a div element to specify layout direction for its children. Layout takes in the following values -> 
a) row -> Items are arranged horizontally with a max height of 100% and max width is the width of the items in the container
b) column -> Items are arranged vertically with a max width of 100% and max-height is the height of the items in the container
flex specifies the height of the row when used with layout = column
flex specifies the width of the column when used with layout = row

Angular material layout
CSS layout is historically notable as the foremost cause of countries going to war, mental health issues, and countless physical confrontations between humans and technological devices. Angular Material has redeemed the sins of our CSS patriarchs by making layout simple. At some point or another, we have all Googled “How to layout two divs side by side” and eventually “How to center element vertically in CSS”.

Because Angular Material is based on CSS flexbox, solving these historically perplexing questions can be achieved in just a few lines of HTML.

Allow me to start with the chore of laying out two elements side by side in HTML. Create a div with a layout attribute set to row and then two (or N really) child elements with a flex attribute on them.

<div layout="row">
<div flex>First item in row</div>
<div flex>Second item in row</div>
</div>
And done! It was just that easy. But what if we want the first child to take just a portion of the page because it is navigation and the second child to take up the rest? Just add a number value to the flex attribute and that is the percentage of the available layout that that element will fill. Easy mode.

<div layout="row">
<div flex="20">
    First Half
  </div>
<div flex>
    Second Half
  </div>
</div>
Responsive Layout
And what about responsive layout? There is an entire set of layout options available to accommodate responsive layout.

For instance, what if we had two child elements that we wanted to live side by side unless we were on a mobile device and then we wanted them to stack. All we would need to do in this case is add an attribute calling out the layout for the small form factor. In this case, we shift from a row layout to a column layout by adding layout-sm=”column” to our parent container.

<div layout="row" layout-sm="column">
<div flex>
    I'm above on mobile, and to the left on larger devices.
  </div>
<div flex>
    I'm below on mobile, and to the right on larger devices.
  </div>
</div>


